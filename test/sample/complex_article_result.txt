<a href="http://phpbb.godfat.org/viewtopic.php?t=873" title="http://phpbb.godfat.org/viewtopic.php?t=873">http://phpbb.godfat.org/viewtopic.php?t=873</a><br /><pre> 作者  godfat (godfat 真常)                                 站內  ProjectX
 標題  Re: [PSC] variants timer
 時間  2008/03/04 Tue 00:34:54
<a href="http://phpbb.godfat.org/viewtopic.php?t=873" title="http://phpbb.godfat.org/viewtopic.php?t=873">http://phpbb.godfat.org/viewtopic.php?t=873</a>
&lt;a href="<a href="http://phpbb.godfat.org/viewtopic.php?t=873" title="http://phpbb.godfat.org/viewtopic.php?t=873">http://phpbb.godfat.org/viewtopic.php?t=873</a>"&gt;
測試&lt;/a&gt;
&lt;a href="<a href="http://phpbb.godfat.org/viewtopic.php?t=873" title="http://phpbb.godfat.org/viewtopic.php?t=873">http://phpbb.godfat.org/viewtopic.php?t=873</a>"&gt;
&lt;img src="<a href="http://phpbb.godfat.org/templates/subSilver/images/logo_phpBB.gif" title="http://phpbb.godfat.org/templates/subSilver/images/logo_phpBB.gif">http://phpbb.godfat.org/templates/subSilver/images/logo_phpBB.gif</a>"/&gt;&lt;/a&gt;
※ 引述《godfat (godfat 真常)》之銘言：
&gt; 3. tuple + traits, 也就是一堆 template 技巧了
&gt; class Dispatcher{
&gt;     template &lt;class T&gt;
&gt;     void sub(shared_ptr&lt;T&gt; p){
&gt;         get_tuple_data_field_by_type&lt;T&gt;(data).push_back(p);
&gt;     }
&gt;     tuple&lt;A, B, C&gt; data;
&gt; };

以上 A, B, C 是指 timer_subscriber_list&lt;A&gt;, etc.

這個東西會需要從 T =&gt; tuple index 的 mapping
現在這部份做完了...........（template 沒忘太多啊哈哈）

#include &lt;tr1/tuple&gt;
#include &lt;tr1/type_traits&gt;
#include &lt;iostream&gt;

using namespace std::tr1;

// 拿來判斷兩個整數是否相同，這是為了檢查有沒有爆表
// 像是 tuple_element&lt;3, tuple&lt;int,int,int&gt; &gt;::type
// 這樣就是爆表，因為這 tuple 沒這麼大
template &lt;bool&gt; struct is_equal_type       { typedef true_type type; };
template &lt;&gt;     struct is_equal_type&lt;false&gt;{ typedef false_type type; };

// 定義相等的話，is_equal&lt;1,1&gt;::value 會是 1
//               is_equal&lt;1,2&gt;::value 會是 0
//                            ::type 會是 true_type/false_type (from tr1)
template &lt;int Lhs, int Rhs&gt; struct is_equal{
    enum{ value = Lhs == Rhs };
    typedef typename is_equal_type&lt;value&gt;::type type;
};

template &lt;class T, class Tuple, int Index&gt; struct type_index_imp;

// 如果跑到這裡，表示爆表了，在我的 g++4.3 上會顯示：
// tuple.cpp:20: error: ‘type_not_found’ is not a member of "T"
template &lt;class T, class Tuple, int Index, class Bool&gt;
struct type_index_check{
    enum{ value = T::type_not_found };
};

// 沒有爆表就繼續找吧
template &lt;class T, class Tuple, int Index&gt;
struct type_index_check&lt;T, Tuple, Index, false_type&gt;{
        enum{ value = type_index_imp&lt;T, Tuple, Index+1&gt;::value };
};

// 找到了！
template &lt;class T, class Tuple, int Index, class Bool&gt;
struct type_index_if{
    enum{ value = Index }; // found, stop recursion
};

// 不直接呼叫 imp, 呼叫 check 檢查是否爆表
template &lt;class T, class Tuple, int Index&gt;
struct type_index_if&lt;T, Tuple, Index, false_type&gt;{
    enum{ value = type_index_check&lt;T, Tuple, Index,
            typename is_equal&lt;Index+1, tuple_size&lt;Tuple&gt;::value&gt;::type&gt;::value };
};

// 檢查兩個型別是否相同
template &lt;class T, class Tuple, int Index&gt;
struct type_index_imp{
    enum{ value = type_index_if&lt;T, Tuple, Index,
            typename is_same&lt;T, typename tuple_element&lt;Index, Tuple&gt;::type&gt;::type&gt;::value };
};

// simple wrapper
template &lt;class T, class Tuple&gt;
struct type_index{
    enum{ value = type_index_imp&lt;T, Tuple, 0&gt;::value };
};

int main(){
    typedef tuple&lt;int, char, void&gt; test_t;
    std::cout &lt;&lt; type_index&lt;int, test_t&gt;::value &lt;&lt; std::endl;
    std::cout &lt;&lt; type_index&lt;char, test_t&gt;::value &lt;&lt; std::endl;
    std::cout &lt;&lt; type_index&lt;void, test_t&gt;::value &lt;&lt; std::endl;
    std::cout &lt;&lt; tuple_size&lt;test_t&gt;::value &lt;&lt; std::endl;
    // std::cout &lt;&lt; type_index&lt;int*, test_t&gt;::value &lt;&lt; std::endl;
}

輸出：
0
1
2
3

最後一行註解拿掉，則顯示：
tuple.cpp:20: error:  "type_not_found" is not a member of "T"

這樣應該是蠻完整的了。有了這個之後.... 後面還有得做 XD
至少還需要一個 tuple for_each, 這也會用 template 遞迴展開

--
 ※ Orign:  群星的眷屬  chance.twbbs.org
 ◆ Author: godfat From 220-135-28-18.HINET-IP.hinet.net</pre><br /><br />end of article...<br />
